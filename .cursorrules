# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When implementing 3D components with React Three Fiber, ensure proper scaling and camera controls for optimal user experience
- When parsing JSON from API responses, always handle potential parsing errors with try/catch blocks
- For complex widget configurations, use a dedicated parser function that can be reused across components
- When creating realistic IoT device representations, use specialized components for each widget type rather than generic 3D objects

# Scratchpad

## Task: Enhance Playground.jsx with Interactive 3D Widgets and Configuration

[X] Create a new 3D widget component using React Three Fiber
[X] Create a configuration modal component for the widgets
[X] Update the Playground.jsx to use the new 3D components
[X] Add configuration functionality to the widgets
[X] Make widgets interactive based on JSON configuration from server
[X] Create realistic IoT device representations for each widget type

### Implementation Details:

1. Created a new `Widget3D.jsx` component that:
   - Uses React Three Fiber to render realistic IoT device representations
   - Parses and uses the detailed JSON configuration from the server
   - Creates specialized 3D components for each widget type (switch, slider, button, etc.)
   - Includes a configuration button that appears on hover
   - Supports rotation and animation based on configuration
   - Handles user interactions (click, hover)

2. Created a `WidgetConfigModal.jsx` component that:
   - Parses and uses the detailed JSON configuration from the server
   - Allows users to configure widget properties
   - Provides different configuration options based on widget type
   - Supports all widget types (switch, slider, button, gauge, etc.)
   - Uses Framer Motion for smooth animations

3. Updated `Playground.jsx` to:
   - Parse and process the JSON configuration from the server
   - Use the new 3D widget components
   - Add configuration functionality
   - Handle widget state management
   - Support saving widget configurations
   - Improve the UI with better styling
   - Display widget states in a more user-friendly format

The implementation now provides a dynamic and interactive playground with realistic 3D IoT widget representations that can be configured through a modal interface. The widgets are fully interactive and use the detailed configuration from the server response to create a more immersive and realistic experience. 